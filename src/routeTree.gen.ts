/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as WebsocketClientImport } from './pages/websocketClient'
import { Route as VideoToGifImport } from './pages/videoToGif'
import { Route as TimestampConverterImport } from './pages/timestampConverter'
import { Route as QrGeneratorImport } from './pages/qrGenerator'
import { Route as PortTableImport } from './pages/portTable'
import { Route as PdfToWordImport } from './pages/pdfToWord'
import { Route as PdfMergerImport } from './pages/pdfMerger'
import { Route as MusicPlayerImport } from './pages/musicPlayer'
import { Route as ImageToPdfImport } from './pages/imageToPdf'
import { Route as ImageMetadataImport } from './pages/imageMetadata'
import { Route as ImageCompressorImport } from './pages/imageCompressor'
import { Route as HttpStatusImport } from './pages/httpStatus'
import { Route as HttpHeadersImport } from './pages/httpHeaders'
import { Route as HexStringConverterImport } from './pages/hexStringConverter'
import { Route as FileUploaderImport } from './pages/fileUploader'
import { Route as ColorConverterImport } from './pages/colorConverter'
import { Route as BrowserTabsImport } from './pages/browserTabs'
import { Route as Base64ConverterImport } from './pages/base64Converter'
import { Route as AsciiTableImport } from './pages/asciiTable'
import { Route as AboutImport } from './pages/about'
import { Route as SpeechToTextImport } from './pages/SpeechToText'
import { Route as IndexImport } from './pages/index'

// Create Virtual Routes

const SignatureLazyImport = createFileRoute('/signature')()
const JsonToTsLazyImport = createFileRoute('/jsonToTs')()
const CoordinateLazyImport = createFileRoute('/coordinate')()
const CalculateDistanceLazyImport = createFileRoute('/calculateDistance')()

// Create/Update Routes

const SignatureLazyRoute = SignatureLazyImport.update({
  id: '/signature',
  path: '/signature',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/signature.lazy').then((d) => d.Route))

const JsonToTsLazyRoute = JsonToTsLazyImport.update({
  id: '/jsonToTs',
  path: '/jsonToTs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/jsonToTs.lazy').then((d) => d.Route))

const CoordinateLazyRoute = CoordinateLazyImport.update({
  id: '/coordinate',
  path: '/coordinate',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/coordinate.lazy').then((d) => d.Route))

const CalculateDistanceLazyRoute = CalculateDistanceLazyImport.update({
  id: '/calculateDistance',
  path: '/calculateDistance',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./pages/calculateDistance.lazy').then((d) => d.Route),
)

const WebsocketClientRoute = WebsocketClientImport.update({
  id: '/websocketClient',
  path: '/websocketClient',
  getParentRoute: () => rootRoute,
} as any)

const VideoToGifRoute = VideoToGifImport.update({
  id: '/videoToGif',
  path: '/videoToGif',
  getParentRoute: () => rootRoute,
} as any)

const TimestampConverterRoute = TimestampConverterImport.update({
  id: '/timestampConverter',
  path: '/timestampConverter',
  getParentRoute: () => rootRoute,
} as any)

const QrGeneratorRoute = QrGeneratorImport.update({
  id: '/qrGenerator',
  path: '/qrGenerator',
  getParentRoute: () => rootRoute,
} as any)

const PortTableRoute = PortTableImport.update({
  id: '/portTable',
  path: '/portTable',
  getParentRoute: () => rootRoute,
} as any)

const PdfToWordRoute = PdfToWordImport.update({
  id: '/pdfToWord',
  path: '/pdfToWord',
  getParentRoute: () => rootRoute,
} as any)

const PdfMergerRoute = PdfMergerImport.update({
  id: '/pdfMerger',
  path: '/pdfMerger',
  getParentRoute: () => rootRoute,
} as any)

const MusicPlayerRoute = MusicPlayerImport.update({
  id: '/musicPlayer',
  path: '/musicPlayer',
  getParentRoute: () => rootRoute,
} as any)

const ImageToPdfRoute = ImageToPdfImport.update({
  id: '/imageToPdf',
  path: '/imageToPdf',
  getParentRoute: () => rootRoute,
} as any)

const ImageMetadataRoute = ImageMetadataImport.update({
  id: '/imageMetadata',
  path: '/imageMetadata',
  getParentRoute: () => rootRoute,
} as any)

const ImageCompressorRoute = ImageCompressorImport.update({
  id: '/imageCompressor',
  path: '/imageCompressor',
  getParentRoute: () => rootRoute,
} as any)

const HttpStatusRoute = HttpStatusImport.update({
  id: '/httpStatus',
  path: '/httpStatus',
  getParentRoute: () => rootRoute,
} as any)

const HttpHeadersRoute = HttpHeadersImport.update({
  id: '/httpHeaders',
  path: '/httpHeaders',
  getParentRoute: () => rootRoute,
} as any)

const HexStringConverterRoute = HexStringConverterImport.update({
  id: '/hexStringConverter',
  path: '/hexStringConverter',
  getParentRoute: () => rootRoute,
} as any)

const FileUploaderRoute = FileUploaderImport.update({
  id: '/fileUploader',
  path: '/fileUploader',
  getParentRoute: () => rootRoute,
} as any)

const ColorConverterRoute = ColorConverterImport.update({
  id: '/colorConverter',
  path: '/colorConverter',
  getParentRoute: () => rootRoute,
} as any)

const BrowserTabsRoute = BrowserTabsImport.update({
  id: '/browserTabs',
  path: '/browserTabs',
  getParentRoute: () => rootRoute,
} as any)

const Base64ConverterRoute = Base64ConverterImport.update({
  id: '/base64Converter',
  path: '/base64Converter',
  getParentRoute: () => rootRoute,
} as any)

const AsciiTableRoute = AsciiTableImport.update({
  id: '/asciiTable',
  path: '/asciiTable',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const SpeechToTextRoute = SpeechToTextImport.update({
  id: '/SpeechToText',
  path: '/SpeechToText',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/SpeechToText': {
      id: '/SpeechToText'
      path: '/SpeechToText'
      fullPath: '/SpeechToText'
      preLoaderRoute: typeof SpeechToTextImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/asciiTable': {
      id: '/asciiTable'
      path: '/asciiTable'
      fullPath: '/asciiTable'
      preLoaderRoute: typeof AsciiTableImport
      parentRoute: typeof rootRoute
    }
    '/base64Converter': {
      id: '/base64Converter'
      path: '/base64Converter'
      fullPath: '/base64Converter'
      preLoaderRoute: typeof Base64ConverterImport
      parentRoute: typeof rootRoute
    }
    '/browserTabs': {
      id: '/browserTabs'
      path: '/browserTabs'
      fullPath: '/browserTabs'
      preLoaderRoute: typeof BrowserTabsImport
      parentRoute: typeof rootRoute
    }
    '/colorConverter': {
      id: '/colorConverter'
      path: '/colorConverter'
      fullPath: '/colorConverter'
      preLoaderRoute: typeof ColorConverterImport
      parentRoute: typeof rootRoute
    }
    '/fileUploader': {
      id: '/fileUploader'
      path: '/fileUploader'
      fullPath: '/fileUploader'
      preLoaderRoute: typeof FileUploaderImport
      parentRoute: typeof rootRoute
    }
    '/hexStringConverter': {
      id: '/hexStringConverter'
      path: '/hexStringConverter'
      fullPath: '/hexStringConverter'
      preLoaderRoute: typeof HexStringConverterImport
      parentRoute: typeof rootRoute
    }
    '/httpHeaders': {
      id: '/httpHeaders'
      path: '/httpHeaders'
      fullPath: '/httpHeaders'
      preLoaderRoute: typeof HttpHeadersImport
      parentRoute: typeof rootRoute
    }
    '/httpStatus': {
      id: '/httpStatus'
      path: '/httpStatus'
      fullPath: '/httpStatus'
      preLoaderRoute: typeof HttpStatusImport
      parentRoute: typeof rootRoute
    }
    '/imageCompressor': {
      id: '/imageCompressor'
      path: '/imageCompressor'
      fullPath: '/imageCompressor'
      preLoaderRoute: typeof ImageCompressorImport
      parentRoute: typeof rootRoute
    }
    '/imageMetadata': {
      id: '/imageMetadata'
      path: '/imageMetadata'
      fullPath: '/imageMetadata'
      preLoaderRoute: typeof ImageMetadataImport
      parentRoute: typeof rootRoute
    }
    '/imageToPdf': {
      id: '/imageToPdf'
      path: '/imageToPdf'
      fullPath: '/imageToPdf'
      preLoaderRoute: typeof ImageToPdfImport
      parentRoute: typeof rootRoute
    }
    '/musicPlayer': {
      id: '/musicPlayer'
      path: '/musicPlayer'
      fullPath: '/musicPlayer'
      preLoaderRoute: typeof MusicPlayerImport
      parentRoute: typeof rootRoute
    }
    '/pdfMerger': {
      id: '/pdfMerger'
      path: '/pdfMerger'
      fullPath: '/pdfMerger'
      preLoaderRoute: typeof PdfMergerImport
      parentRoute: typeof rootRoute
    }
    '/pdfToWord': {
      id: '/pdfToWord'
      path: '/pdfToWord'
      fullPath: '/pdfToWord'
      preLoaderRoute: typeof PdfToWordImport
      parentRoute: typeof rootRoute
    }
    '/portTable': {
      id: '/portTable'
      path: '/portTable'
      fullPath: '/portTable'
      preLoaderRoute: typeof PortTableImport
      parentRoute: typeof rootRoute
    }
    '/qrGenerator': {
      id: '/qrGenerator'
      path: '/qrGenerator'
      fullPath: '/qrGenerator'
      preLoaderRoute: typeof QrGeneratorImport
      parentRoute: typeof rootRoute
    }
    '/timestampConverter': {
      id: '/timestampConverter'
      path: '/timestampConverter'
      fullPath: '/timestampConverter'
      preLoaderRoute: typeof TimestampConverterImport
      parentRoute: typeof rootRoute
    }
    '/videoToGif': {
      id: '/videoToGif'
      path: '/videoToGif'
      fullPath: '/videoToGif'
      preLoaderRoute: typeof VideoToGifImport
      parentRoute: typeof rootRoute
    }
    '/websocketClient': {
      id: '/websocketClient'
      path: '/websocketClient'
      fullPath: '/websocketClient'
      preLoaderRoute: typeof WebsocketClientImport
      parentRoute: typeof rootRoute
    }
    '/calculateDistance': {
      id: '/calculateDistance'
      path: '/calculateDistance'
      fullPath: '/calculateDistance'
      preLoaderRoute: typeof CalculateDistanceLazyImport
      parentRoute: typeof rootRoute
    }
    '/coordinate': {
      id: '/coordinate'
      path: '/coordinate'
      fullPath: '/coordinate'
      preLoaderRoute: typeof CoordinateLazyImport
      parentRoute: typeof rootRoute
    }
    '/jsonToTs': {
      id: '/jsonToTs'
      path: '/jsonToTs'
      fullPath: '/jsonToTs'
      preLoaderRoute: typeof JsonToTsLazyImport
      parentRoute: typeof rootRoute
    }
    '/signature': {
      id: '/signature'
      path: '/signature'
      fullPath: '/signature'
      preLoaderRoute: typeof SignatureLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/SpeechToText': typeof SpeechToTextRoute
  '/about': typeof AboutRoute
  '/asciiTable': typeof AsciiTableRoute
  '/base64Converter': typeof Base64ConverterRoute
  '/browserTabs': typeof BrowserTabsRoute
  '/colorConverter': typeof ColorConverterRoute
  '/fileUploader': typeof FileUploaderRoute
  '/hexStringConverter': typeof HexStringConverterRoute
  '/httpHeaders': typeof HttpHeadersRoute
  '/httpStatus': typeof HttpStatusRoute
  '/imageCompressor': typeof ImageCompressorRoute
  '/imageMetadata': typeof ImageMetadataRoute
  '/imageToPdf': typeof ImageToPdfRoute
  '/musicPlayer': typeof MusicPlayerRoute
  '/pdfMerger': typeof PdfMergerRoute
  '/pdfToWord': typeof PdfToWordRoute
  '/portTable': typeof PortTableRoute
  '/qrGenerator': typeof QrGeneratorRoute
  '/timestampConverter': typeof TimestampConverterRoute
  '/videoToGif': typeof VideoToGifRoute
  '/websocketClient': typeof WebsocketClientRoute
  '/calculateDistance': typeof CalculateDistanceLazyRoute
  '/coordinate': typeof CoordinateLazyRoute
  '/jsonToTs': typeof JsonToTsLazyRoute
  '/signature': typeof SignatureLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/SpeechToText': typeof SpeechToTextRoute
  '/about': typeof AboutRoute
  '/asciiTable': typeof AsciiTableRoute
  '/base64Converter': typeof Base64ConverterRoute
  '/browserTabs': typeof BrowserTabsRoute
  '/colorConverter': typeof ColorConverterRoute
  '/fileUploader': typeof FileUploaderRoute
  '/hexStringConverter': typeof HexStringConverterRoute
  '/httpHeaders': typeof HttpHeadersRoute
  '/httpStatus': typeof HttpStatusRoute
  '/imageCompressor': typeof ImageCompressorRoute
  '/imageMetadata': typeof ImageMetadataRoute
  '/imageToPdf': typeof ImageToPdfRoute
  '/musicPlayer': typeof MusicPlayerRoute
  '/pdfMerger': typeof PdfMergerRoute
  '/pdfToWord': typeof PdfToWordRoute
  '/portTable': typeof PortTableRoute
  '/qrGenerator': typeof QrGeneratorRoute
  '/timestampConverter': typeof TimestampConverterRoute
  '/videoToGif': typeof VideoToGifRoute
  '/websocketClient': typeof WebsocketClientRoute
  '/calculateDistance': typeof CalculateDistanceLazyRoute
  '/coordinate': typeof CoordinateLazyRoute
  '/jsonToTs': typeof JsonToTsLazyRoute
  '/signature': typeof SignatureLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/SpeechToText': typeof SpeechToTextRoute
  '/about': typeof AboutRoute
  '/asciiTable': typeof AsciiTableRoute
  '/base64Converter': typeof Base64ConverterRoute
  '/browserTabs': typeof BrowserTabsRoute
  '/colorConverter': typeof ColorConverterRoute
  '/fileUploader': typeof FileUploaderRoute
  '/hexStringConverter': typeof HexStringConverterRoute
  '/httpHeaders': typeof HttpHeadersRoute
  '/httpStatus': typeof HttpStatusRoute
  '/imageCompressor': typeof ImageCompressorRoute
  '/imageMetadata': typeof ImageMetadataRoute
  '/imageToPdf': typeof ImageToPdfRoute
  '/musicPlayer': typeof MusicPlayerRoute
  '/pdfMerger': typeof PdfMergerRoute
  '/pdfToWord': typeof PdfToWordRoute
  '/portTable': typeof PortTableRoute
  '/qrGenerator': typeof QrGeneratorRoute
  '/timestampConverter': typeof TimestampConverterRoute
  '/videoToGif': typeof VideoToGifRoute
  '/websocketClient': typeof WebsocketClientRoute
  '/calculateDistance': typeof CalculateDistanceLazyRoute
  '/coordinate': typeof CoordinateLazyRoute
  '/jsonToTs': typeof JsonToTsLazyRoute
  '/signature': typeof SignatureLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/SpeechToText'
    | '/about'
    | '/asciiTable'
    | '/base64Converter'
    | '/browserTabs'
    | '/colorConverter'
    | '/fileUploader'
    | '/hexStringConverter'
    | '/httpHeaders'
    | '/httpStatus'
    | '/imageCompressor'
    | '/imageMetadata'
    | '/imageToPdf'
    | '/musicPlayer'
    | '/pdfMerger'
    | '/pdfToWord'
    | '/portTable'
    | '/qrGenerator'
    | '/timestampConverter'
    | '/videoToGif'
    | '/websocketClient'
    | '/calculateDistance'
    | '/coordinate'
    | '/jsonToTs'
    | '/signature'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/SpeechToText'
    | '/about'
    | '/asciiTable'
    | '/base64Converter'
    | '/browserTabs'
    | '/colorConverter'
    | '/fileUploader'
    | '/hexStringConverter'
    | '/httpHeaders'
    | '/httpStatus'
    | '/imageCompressor'
    | '/imageMetadata'
    | '/imageToPdf'
    | '/musicPlayer'
    | '/pdfMerger'
    | '/pdfToWord'
    | '/portTable'
    | '/qrGenerator'
    | '/timestampConverter'
    | '/videoToGif'
    | '/websocketClient'
    | '/calculateDistance'
    | '/coordinate'
    | '/jsonToTs'
    | '/signature'
  id:
    | '__root__'
    | '/'
    | '/SpeechToText'
    | '/about'
    | '/asciiTable'
    | '/base64Converter'
    | '/browserTabs'
    | '/colorConverter'
    | '/fileUploader'
    | '/hexStringConverter'
    | '/httpHeaders'
    | '/httpStatus'
    | '/imageCompressor'
    | '/imageMetadata'
    | '/imageToPdf'
    | '/musicPlayer'
    | '/pdfMerger'
    | '/pdfToWord'
    | '/portTable'
    | '/qrGenerator'
    | '/timestampConverter'
    | '/videoToGif'
    | '/websocketClient'
    | '/calculateDistance'
    | '/coordinate'
    | '/jsonToTs'
    | '/signature'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SpeechToTextRoute: typeof SpeechToTextRoute
  AboutRoute: typeof AboutRoute
  AsciiTableRoute: typeof AsciiTableRoute
  Base64ConverterRoute: typeof Base64ConverterRoute
  BrowserTabsRoute: typeof BrowserTabsRoute
  ColorConverterRoute: typeof ColorConverterRoute
  FileUploaderRoute: typeof FileUploaderRoute
  HexStringConverterRoute: typeof HexStringConverterRoute
  HttpHeadersRoute: typeof HttpHeadersRoute
  HttpStatusRoute: typeof HttpStatusRoute
  ImageCompressorRoute: typeof ImageCompressorRoute
  ImageMetadataRoute: typeof ImageMetadataRoute
  ImageToPdfRoute: typeof ImageToPdfRoute
  MusicPlayerRoute: typeof MusicPlayerRoute
  PdfMergerRoute: typeof PdfMergerRoute
  PdfToWordRoute: typeof PdfToWordRoute
  PortTableRoute: typeof PortTableRoute
  QrGeneratorRoute: typeof QrGeneratorRoute
  TimestampConverterRoute: typeof TimestampConverterRoute
  VideoToGifRoute: typeof VideoToGifRoute
  WebsocketClientRoute: typeof WebsocketClientRoute
  CalculateDistanceLazyRoute: typeof CalculateDistanceLazyRoute
  CoordinateLazyRoute: typeof CoordinateLazyRoute
  JsonToTsLazyRoute: typeof JsonToTsLazyRoute
  SignatureLazyRoute: typeof SignatureLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SpeechToTextRoute: SpeechToTextRoute,
  AboutRoute: AboutRoute,
  AsciiTableRoute: AsciiTableRoute,
  Base64ConverterRoute: Base64ConverterRoute,
  BrowserTabsRoute: BrowserTabsRoute,
  ColorConverterRoute: ColorConverterRoute,
  FileUploaderRoute: FileUploaderRoute,
  HexStringConverterRoute: HexStringConverterRoute,
  HttpHeadersRoute: HttpHeadersRoute,
  HttpStatusRoute: HttpStatusRoute,
  ImageCompressorRoute: ImageCompressorRoute,
  ImageMetadataRoute: ImageMetadataRoute,
  ImageToPdfRoute: ImageToPdfRoute,
  MusicPlayerRoute: MusicPlayerRoute,
  PdfMergerRoute: PdfMergerRoute,
  PdfToWordRoute: PdfToWordRoute,
  PortTableRoute: PortTableRoute,
  QrGeneratorRoute: QrGeneratorRoute,
  TimestampConverterRoute: TimestampConverterRoute,
  VideoToGifRoute: VideoToGifRoute,
  WebsocketClientRoute: WebsocketClientRoute,
  CalculateDistanceLazyRoute: CalculateDistanceLazyRoute,
  CoordinateLazyRoute: CoordinateLazyRoute,
  JsonToTsLazyRoute: JsonToTsLazyRoute,
  SignatureLazyRoute: SignatureLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/SpeechToText",
        "/about",
        "/asciiTable",
        "/base64Converter",
        "/browserTabs",
        "/colorConverter",
        "/fileUploader",
        "/hexStringConverter",
        "/httpHeaders",
        "/httpStatus",
        "/imageCompressor",
        "/imageMetadata",
        "/imageToPdf",
        "/musicPlayer",
        "/pdfMerger",
        "/pdfToWord",
        "/portTable",
        "/qrGenerator",
        "/timestampConverter",
        "/videoToGif",
        "/websocketClient",
        "/calculateDistance",
        "/coordinate",
        "/jsonToTs",
        "/signature"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/SpeechToText": {
      "filePath": "SpeechToText.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/asciiTable": {
      "filePath": "asciiTable.tsx"
    },
    "/base64Converter": {
      "filePath": "base64Converter.tsx"
    },
    "/browserTabs": {
      "filePath": "browserTabs.tsx"
    },
    "/colorConverter": {
      "filePath": "colorConverter.tsx"
    },
    "/fileUploader": {
      "filePath": "fileUploader.tsx"
    },
    "/hexStringConverter": {
      "filePath": "hexStringConverter.tsx"
    },
    "/httpHeaders": {
      "filePath": "httpHeaders.tsx"
    },
    "/httpStatus": {
      "filePath": "httpStatus.tsx"
    },
    "/imageCompressor": {
      "filePath": "imageCompressor.tsx"
    },
    "/imageMetadata": {
      "filePath": "imageMetadata.tsx"
    },
    "/imageToPdf": {
      "filePath": "imageToPdf.tsx"
    },
    "/musicPlayer": {
      "filePath": "musicPlayer.tsx"
    },
    "/pdfMerger": {
      "filePath": "pdfMerger.tsx"
    },
    "/pdfToWord": {
      "filePath": "pdfToWord.tsx"
    },
    "/portTable": {
      "filePath": "portTable.tsx"
    },
    "/qrGenerator": {
      "filePath": "qrGenerator.tsx"
    },
    "/timestampConverter": {
      "filePath": "timestampConverter.tsx"
    },
    "/videoToGif": {
      "filePath": "videoToGif.tsx"
    },
    "/websocketClient": {
      "filePath": "websocketClient.tsx"
    },
    "/calculateDistance": {
      "filePath": "calculateDistance.lazy.tsx"
    },
    "/coordinate": {
      "filePath": "coordinate.lazy.tsx"
    },
    "/jsonToTs": {
      "filePath": "jsonToTs.lazy.tsx"
    },
    "/signature": {
      "filePath": "signature.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
